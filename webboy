#!/usr/bin/ruby

require "fileutils"
require "kramdown"
require "trollop"

# This function is used to create URL snippets from page titles
def escape page_name
    page_name.gsub(/ /, "-").tr("A-ZÄÖÜ", "a-zäöü")
end

# Le option parser
opts = Trollop::options do
    version "webboy 0"
    banner <<-EOS
Options:
    EOS
    opt :input, "Directory containing the wiki pages", :short => "i", :type => :string
    opt :output, "Output directory (will be OVERWRITTEN!)", :short => "o", :type => :string
    opt :template, "HTML template to use", :short => "t", :default => File.dirname(__FILE__)+"/template.html"
    opt :static, "Static files to copy into output dir", :short => "s", :type => :string
    opt :main, "Name of the starting page", :short => "m", :type => :string
end

wiki_dir = opts[:input]+"/"
target_dir = opts[:output]+"/"
skeleton_dir = opts[:static]
template_file = opts[:template]
mainpage = opts[:main]
autolinks = true

# Recreate target directory, as all files are recreated nevertheless
FileUtils.rm_r target_dir if File.exists? target_dir
if skeleton_dir
    FileUtils.cp_r skeleton_dir+"/", target_dir
else
    FileUtils.mkdir target_dir
end

# Show the mainpage by default
FileUtils.ln_s(escape(mainpage)+"/index.html", target_dir+"index.html")

# Collect the titles of the pages
page_names = Dir.entries(wiki_dir).reject{|entry| entry =~ /^\./}.sort_by{|pn| -pn.size}

# ...and for each page:
page_names.each do |page_name|
    puts target_filename = target_dir+escape(page_name)+"/index.html"
    source_filename = wiki_dir+page_name
    Dir.mkdir(target_dir+escape(page_name))
    template = IO.read(template_file)

    log = `git log --pretty=format:'### %s <small><a href="#%h" name="%h">%ad</a></small>%n%b' --date=short`

    open(target_filename, "w") do |file|
        content = IO.read(source_filename)

        # auto-link links
        content.gsub!(/([^(])(https?:\/\/[^\s]+)/, '\1<\2>')

        # in very clear cases, let newlines become <br /> tags
        content.gsub!(/^[\w\<][^\n]*\n+/) do |x|
            x =~ /\n{2}/ ? x : (x.strip!; x << " \n")
        end

        content.sub!(/LOG/, log)

        if autolinks
            page_names.each do |p|
                p p
                content.gsub!(/(#{p})([a-zA-ZäüöÄÜÖß]?)/) do
                    pn = Regexp.last_match[1]
                    letter = Regexp.last_match[2]
                    "[#{pn}#{letter}](/#{escape(pn)}/)"
                end
            end
        else
            # [Links] to [Links](/links/)
            content.gsub!(/\[[^\]]*\]/) do |link|
                page = link[1..-2]
                if page_names.include? page
                    "[#{link}](/#{escape(page)}/)"
                else
                    link
                end
            end
        end

        content = Kramdown::Document.new(content).to_html

        template.sub!(/CONTENT/, content)
        template.gsub!(/TITLE/, page_name)
        template.gsub!(/MTIME/, `git log -1 --format="%cd" --date=short -- "#{source_filename}"`)

        file.write template
    end
end
